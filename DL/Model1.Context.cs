//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AGutierrezCRUDProductoEntities : DbContext
    {
        public AGutierrezCRUDProductoEntities()
            : base("name=AGutierrezCRUDProductoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Producto> Productoes { get; set; }
        public virtual DbSet<Categoria> Categorias { get; set; }
    
        public virtual int ProductoAdd(string nombre, string descripcion, Nullable<int> stock)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductoAdd", nombreParameter, descripcionParameter, stockParameter);
        }
    
        public virtual int ProductoDelete(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductoDelete", idProductoParameter);
        }
    
        public virtual ObjectResult<ProductoGetAll_Result> ProductoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductoGetAll_Result>("ProductoGetAll");
        }
    
        public virtual ObjectResult<ProductoGetById_Result> ProductoGetById(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductoGetById_Result>("ProductoGetById", idProductoParameter);
        }
    
        public virtual int ProductoUpdate(Nullable<int> idProducto, string nombre, string descripcion, Nullable<int> stock)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductoUpdate", idProductoParameter, nombreParameter, descripcionParameter, stockParameter);
        }
    
        public virtual int CategoriaAdd(string nombre, string descripcion, string estado, string encargadoCategoria, string proveedor, string ciudadProveedor)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var encargadoCategoriaParameter = encargadoCategoria != null ?
                new ObjectParameter("EncargadoCategoria", encargadoCategoria) :
                new ObjectParameter("EncargadoCategoria", typeof(string));
    
            var proveedorParameter = proveedor != null ?
                new ObjectParameter("Proveedor", proveedor) :
                new ObjectParameter("Proveedor", typeof(string));
    
            var ciudadProveedorParameter = ciudadProveedor != null ?
                new ObjectParameter("CiudadProveedor", ciudadProveedor) :
                new ObjectParameter("CiudadProveedor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriaAdd", nombreParameter, descripcionParameter, estadoParameter, encargadoCategoriaParameter, proveedorParameter, ciudadProveedorParameter);
        }
    
        public virtual int CategoriaDelete(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriaDelete", idCategoriaParameter);
        }
    
        public virtual ObjectResult<CategoriaGetAll_Result> CategoriaGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriaGetAll_Result>("CategoriaGetAll");
        }
    
        public virtual ObjectResult<CategoriaGetById_Result> CategoriaGetById(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriaGetById_Result>("CategoriaGetById", idCategoriaParameter);
        }
    
        public virtual int CategoriaUpdate(Nullable<int> idCategoria, string nombre, string descripcion, string estado, string encargadoCategoria, string proveedor, string ciudadProveedor)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var encargadoCategoriaParameter = encargadoCategoria != null ?
                new ObjectParameter("EncargadoCategoria", encargadoCategoria) :
                new ObjectParameter("EncargadoCategoria", typeof(string));
    
            var proveedorParameter = proveedor != null ?
                new ObjectParameter("Proveedor", proveedor) :
                new ObjectParameter("Proveedor", typeof(string));
    
            var ciudadProveedorParameter = ciudadProveedor != null ?
                new ObjectParameter("CiudadProveedor", ciudadProveedor) :
                new ObjectParameter("CiudadProveedor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriaUpdate", idCategoriaParameter, nombreParameter, descripcionParameter, estadoParameter, encargadoCategoriaParameter, proveedorParameter, ciudadProveedorParameter);
        }
    }
}
